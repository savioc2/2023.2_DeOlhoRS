// Generated by CoffeeScript 1.6.3
var defer, promisifyFunction, promisifyObject,
  __slice = [].slice;

defer = require('kew').defer;

promisifyFunction = function(func, bind) {
  if (bind == null) {
    bind = null;
  }
  if (func.__promisified__) {
    return func.__promisified__;
  }
  func.__promisified__ = function() {
    var args, promise,
      _this = this;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    promise = defer();
    func.call.apply(func, [bind].concat(__slice.call(args), [function(err, result) {
      if (err) {
        return promise.reject(err);
      } else {
        return promise.resolve(result);
      }
    }]));
    return promise;
  };
  return func.__promisified__;
};

promisifyObject = function(obj) {
  var k, nObj, v;
  if (obj.__promisified__) {
    return obj.__promisified__;
  }
  nObj = Object.create(obj);
  for (k in obj) {
    v = obj[k];
    if (typeof v === 'function') {
      nObj[k] = promisifyFunction(v, obj);
    }
  }
  obj.__promisified__ = nObj;
  return obj.__promisified__;
};

module.exports = function(o, bind) {
  if (typeof o === 'function') {
    return promisifyFunction(o, bind);
  } else {
    return promisifyObject(o);
  }
};

module.exports.promiseToCallback = function(promise, cb) {
  promise.then(function(result) {
    return cb(null, result);
  }).fail(function(err) {
    return cb(err);
  });
  return void 0;
};
